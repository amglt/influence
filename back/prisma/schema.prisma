// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    BigInt                   @id
  username              String
  guild                 String?
  nickname              String
  created_at            DateTime
  updated_at            DateTime
  picture               String
  roleId                Int?
  role                  Role?                    @relation(fields: [roleId], references: [id])
  blocked               Boolean                  @default(false)
  player1pvpGames       PvpGame[]                @relation("Player1")
  player2pvpGames       PvpGame[]                @relation("Player2")
  player3pvpGames       PvpGame[]                @relation("Player3")
  player4pvpGames       PvpGame[]                @relation("Player4")
  player5pvpGames       PvpGame[]                @relation("Player5")
  accounts              Account[]
  playerPeriods         PlayerPeriod[]
}

model Permission {
  id             Int                     @id @default(autoincrement())
  name           String
  roles          Role[]
}

model Role {
  id             Int                     @id @default(autoincrement())
  name           String
  permissions    Permission[]
  users          User[]
}

model Account {
  id            Int                      @id @default(autoincrement())
  name          String                   @unique
  userId        BigInt
  user          User                     @relation(fields: [userId], references: [id])
  characters    Character[]
}

model Character {
  id                      Int            @id @default(autoincrement())
  name                    String         @unique
  class                   String
  rank                    String
  account                 Account        @relation(fields: [accountId], references: [id])
  accountId               Int
  recruitmentDate         DateTime
}

model Period {
  id                      Int            @id @default(autoincrement())
  startDate               DateTime
  endDate                 DateTime?
  pvpGames                PvpGame[]
  playersPeriods          PlayerPeriod[]
}

model Scale {
  id                        Int            @id @default(autoincrement())
  percoAttackWinPoints      Float
  percoAttackLoosePoints    Float
  percoDefWinPoints         Float
  percoDefLoosePoints       Float
  percoNDPoints             Float
  prismAttackWinPoints      Float
  prismAttackLoosePoints    Float
  prismDefWinPoints         Float
  prismDefLoosePoints       Float
  prismNDPoints             Float
  bigPercoAttackWinPoints   Float
  bigPercoAttackLoosePoints Float
  bigPercoDefWinPoints      Float
  bigPercoDefLoosePoints    Float
  bigPercoNDPoints          Float
  bigPrismAttackWinPoints   Float
  bigPrismAttackLoosePoints Float
  bigPrismNDPoints          Float
  bigPrismDefWinPoints      Float
  bigPrismDefLoosePoints    Float
  avaWin                    Float
  avaLoose                  Float
}

model PvpGame {
  id                      Int            @id @default(autoincrement())
  result                  Int
  type                    Int
  status                  Int
  player1Id               BigInt
  player1                 User           @relation("Player1", fields: [player1Id], references: [id])
  player2Id               BigInt?
  player2                 User?          @relation("Player2", fields: [player2Id], references: [id])
  player3Id               BigInt?
  player3                 User?          @relation("Player3", fields: [player3Id], references: [id])
  player4Id               BigInt?
  player4                 User?          @relation("Player4", fields: [player4Id], references: [id])
  player5Id               BigInt?
  player5                 User?          @relation("Player5", fields: [player5Id], references: [id])
  period                  Period         @relation(fields: [periodId], references: [id])
  periodId                Int
  screenshotUrl           String
  timestamp               DateTime
  bigOpponent             Boolean        @default(false)
  gamePoints              Float
  requester               String
}

model PlayerPeriod {
  playerId                BigInt
  player                  User           @relation(fields: [playerId], references: [id])
  periodId                Int
  playerName              String         @default("")
  playerGuild             String         @default("")
  period                  Period         @relation(fields: [periodId], references: [id])
  totalPoints             Float
  @@id([playerId, periodId])
}